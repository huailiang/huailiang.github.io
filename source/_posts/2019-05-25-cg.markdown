---
layout:     post
title:      "CG/hlsl 内置函数"
date:       2019-05-25 03:00:00
author:     "Huailiang"
tags:
    - 引擎
---


### 数学函数

abs(x)      &nbsp;返回输入参数的绝对值

acos(x)     &nbsp;反余切函数，输入参数范围为[-1,1]， 返回[0,π]区间的角度值

all(x)      &nbsp;如果输入参数均不为0，则返回ture； 否则返回flase。&&运算

any(x)      &nbsp;输入参数只要有其中一个不为0，则返回true。

asin(x)     &nbsp;反正弦函数,输入参数取值区间为[−1,1]，返回角度值范围为, [−π/2,π/2]

atan(x)     &nbsp;反正切函数，返回角度值范围为[−π/2,π/2]

atan2(y,x)  &nbsp;计算y/x的反正切值。实际上和atan(x)函数功能完全一样，至少输入参数不同。

atan(x)     &nbsp; atan2(x, float(1))。

ceil(x)     &nbsp;对输入参数向上取整。例如： ceil(float(1.3)) ，其返回值为2.0

clamp(x,a,b)  &nbsp; 如果x值小于a，则返回a；如果x值大于b，返回b；否则，返回x。

cos(x)      &nbsp;返回弧度x的余弦值。返回值范围为[−1,1]

cosh(x)     &nbsp;双曲余弦（hyperbolic cosine）函数，计算x的双曲余弦值。

cross(A,B)  &nbsp;返回两个三元向量的叉积(cross product)。注意，输入参数必须是三元向量！

dot(A,B)    &nbsp;返回A和B的点积(dot product)。参数A和B可以是标量，也可以是向量

mul(M, N)   &nbsp;矩阵M和矩阵N的积

mul(M, v)   &nbsp;矩阵M和列向量v的积

mul(v, M)   &nbsp;行向量v和矩阵M的积

```
Tips：
A*B   表示向量A,B的分量相乘。如：(2,1,3) * (1,2,2) = (2,2,6)
dot   点积，得到是一个标量。 如：（1，3，1）*（2，1，0)=1*2+3*1+1*0=5
cross 叉积，得到一个垂直于向量 A,B 的向量。
mul   矩阵参与的运算，一般用来空间变换。
```

$$
a =(x_1,y_1,z_1),  b=(x_2,y_2,z_2) \\
a \cdot b = x_1x_2 + y_1y_2 + z_1z_2 =|a||b|cos\theta \\
a × b =（y_1z_2 - z_1y_2）i+（z_1y_2-x_1z_2）j+（x_1y_2-y_1x_2）k
$$



degrees(x)  &nbsp;输入参数为弧度值(radians)，函数将其转换为角度值(degrees)

determinant(m)  &nbsp;计算矩阵的行列式因子。

exp(x)      &nbsp;计算 $$ e^x $$的值，e=2.71828182845904523536

exp2(x)     &nbsp;计算 $$2^x $$ 的值

floor(x)    &nbsp;对输入参数向下取整。例如floor(float(1.3))返回的值为1.0；但是floor(float(-1.3))返回的值为-2.0。该函数与ceil(x)函数相对应。

fmod(x,y)   &nbsp;返回x/y的余数。如果y为0，结果不可预料。

frac(x)     &nbsp;返回标量或矢量的小数

frexp(x, out i) &nbsp;将浮点数x分解为尾数和指数，即x=m∗2i， 返回m，并将指数存入i中；如果x为0，则尾数和指数都返回0

fwidth(x) &nbsp;只能用在fragment shaderm 表示X和Y方向偏导数的绝对值的和，而单方向的偏导可以通过ddx和ddy, 即 abs(ddx(p)+ddy(p))

isfinite(x) &nbsp;判断标量或者向量中的每个数据是否是有限数，如果是返回true；否则返回false;

isinf(x)    &nbsp;判断标量或者向量中的每个数据是否是无限，如果是返回true；否则返回false;

isnan(x)    &nbsp;判断标量或者向量中的每个数据是否是非数据(not-a-number NaN)，如果是返回true；否则返回false;

ldexp(x, n) &nbsp;计算 $$ x∗2^n $$的值

lerp(a, b, f)   &nbsp;计算(1−f)∗a+b∗f或者a+f∗(b−a)的值。即在下限a和上限b之间进行插值，f表示权值。注意，如果a和b是向量，则权值f必须是标量或者等长的向量。

lit(NdotL, NdotH, m)    &nbsp;N表示法向量；L表示入射光向量；H表示半角向量；m表示高光系数。 函数计算环境光、散射光、镜面光的贡献，返回的4元向量。 X位表示环境光的贡献，总是1.0; Y位代表散射光的贡献，如果 N∙L<0，则为0；否则为N∙L Z位代表镜面光的贡献，如果N∙L<0 或者N∙H<0，则位0；否则为(N∙L)m;W位始终位1.0

log(x)      &nbsp;计算 $$ \ln{(x)} $$的值，x必须大于0

log2(x)     &nbsp;计算 $$ \log_2{(x)} $$ 的值，x必须大于0

log10(x)    &nbsp;计算 $$ log_{10}{(x)} $$ 的值，x必须大于0

max(a, b)   &nbsp;比较两个标量或等长向量元素，返回最大值。

min(a, b)    &nbsp;比较两个标量或等长向量元素，返回最小值。

modf(x, out ip) &nbsp;把x分解成整数和分数两部分，每部分都和x有着相同的符号，整数部分被保存在ip中，分数部分由函数返回

noise(x)    &nbsp;根据它的参数类型，这个函数可以是一元、二元或三元噪音函数。返回的值在0和1之间，并且通常与给定的输入值一样

pow(x, y)   &nbsp; x的y次方，即$$x^y$$

radians(x)  &nbsp;函数将角度值转换为弧度值round(x)返回四舍五入值。

rsqrt(x)    &nbsp;x的平方根的倒数，即 $$ \frac{1}{\sqrt{x}} $$。  x必须大于0 

saturate(x) &nbsp;把x限制到[0,1]之间sign(x)如果x>0则返回1；否则返回0

sin(x)      &nbsp;输入参数为弧度，计算正弦值，返回值范围 为[-1,1]

sincos(float x, out s, out c)   &nbsp;该函数是同时计算x的sin值和cos值，其中s=sin(x)，c=cos(x)。该函数用于同时需要计算sin值和cos值，比分别运算要快很多!

sinh(x)     &nbsp;计算x的双曲正弦

smoothstep(min, max, x) &nbsp;值x位于min、max区间中。如果x=min，返回0；如果x=max，返回1；如果x在两者之间返回x

step(a, x)  &nbsp;如果x<a, 返回0；否则返回1

sqrt(x)     &nbsp;求x的平方根，$$ \sqrt{x} $$ ，x必须大于0

tan(x)      &nbsp;计算x正切值tanh(x)计算x的双曲线切线

transpose(M)  &nbsp;矩阵M的转置矩阵如果M是一个AxB矩阵，M的转置是一个BxA矩阵，它的第一列是M的第一行，第二列是M的第二行，第三列是M的第三行，等等
 

 
### 几何函数

distance(pt1, pt2)  &nbsp;两点之间的欧几里德距离（Euclidean distance）

faceforward(N,I,Ng) &nbsp;如果Ng∙I<0，返回N；否则返回-N。

length(v)           &nbsp;返回一个向量的模，即sqrt(dot(v,v))

normalize(v)        &nbsp;返回v向量的单位向量

reflect(I, N)       &nbsp;根据入射光纤方向I和表面法向量N计算反射向量，仅对三元向量有效

refract(I,N,eta)    &nbsp;根据入射光线方向I，表面法向量N和折射相对系数eta,计算折射向量。如果对给定的eta,I和N之间的角度太大，返回(0,0,0)。只对三元向量有效
 

### 纹理映射函数

tex1D(sampler1D tex, float s)   &nbsp;一维纹理查询

tex1D(sampler1D tex, float s, float dsdx, float dsdy) &nbsp;使用导数值（derivatives）查询一维纹理

Tex1D(sampler1D tex, float2 sz) &nbsp;一维纹理查询，并进行深度值比较

Tex1D(sampler1D tex, float2 sz, float dsdx,float dsdy) &nbsp;使用导数值（derivatives）查询一维纹理， 并进行深度值比较

Tex1Dproj(sampler1D tex, float2 sq) &nbsp;一维投影纹理查询

Tex1Dproj(sampler1D tex, float3 szq) &nbsp;一维投影纹理查询，并比较深度值

Tex2D(sampler2D tex, float2 s) &nbsp;二维纹理查询

Tex2D(sampler2D tex, float2 s, float2 dsdx, float2 dsdy) &nbsp;使用导数值（derivatives）查询二维纹理

Tex2D(sampler2D tex, float3 sz) &nbsp;二维纹理查询，并进行深度值比较

Tex2D(sampler2D tex, float3 sz, float2 dsdx,float2 dsdy) &nbsp;使用导数值（derivatives）查询二维纹理，并进行深度值比较

Tex2Dproj(sampler2D tex, float3 sq) &nbsp;二维投影纹理查询

Tex2Dproj(sampler2D tex, float4 szq) &nbsp;二维投影纹理查询，并进行深度值比较

texRECT(samplerRECT tex, float2 s) &nbsp;二维非投影矩形纹理查询（OpenGL独有）

texRECT (samplerRECT tex, float3 sz, float2 dsdx,float2 dsdy) &nbsp;二维非投影使用导数的矩形纹理查询（OpenGL独有）

texRECT (samplerRECT tex, float3 sz) &nbsp;二维非投影深度比较矩形纹理查询（OpenGL独有）

texRECT (samplerRECT tex, float3 sz, float2 dsdx,float2 dsdy) &nbsp;二维非投影深度比较并使用导数的矩形纹理查询（OpenGL独有）

texRECT proj(samplerRECT tex, float3 sq) &nbsp;二维投影矩形纹理查询（OpenGL独有）

texRECT proj(samplerRECT tex, float3 szq) &nbsp;二维投影矩形纹理深度比较查询（OpenGL独有）

Tex3D(sampler3D tex, float s )&nbsp;三维纹理查询

Tex3D(sampler3D tex, float3 s, float3 dsdx, float3 dsdy) &nbsp;结合导数值（derivatives）查询三维纹理

Tex3Dproj(sampler3D tex, float4 szq) &nbsp;查询三维投影纹理，并进行深度值比较

texCUBE(samplerCUBE tex, float3 s) &nbsp;查询立方体纹理

texCUBE (samplerCUBE tex, float3 s, float3 dsdx, float3 dsdy) &nbsp;结合导数值（derivatives）查询立方体纹理

texCUBEproj (samplerCUBE tex, float4 sq) &nbsp;查询投影立方体纹理

在这个表中，每个函数第二个参数的名字指明了在执行纹理查询的时候，它的值是如果被使用的:
s表示这是一个一元、二元或三元纹理坐标。
z表示这是一个用来进行阴影贴图查找的深度比较值。
q表示这是一个透视值，在进行纹理查找之前，它被用来除以纹理坐标（s）。
当你使用的纹理函数允许你指定一个深度比较值的时候，与之相关联的纹理单元必须被设置成深度比较纹理。否则，深度比较实际上不会被执行。 

### 偏导函数

ddx(a) &nbsp;近似a关于屏幕空间x轴的偏导数ddy(a)近似a关于屏幕空间y轴的偏导数

### 指令优化

mad是mul add的缩写，我们需要在代码中使用mul add的写法，因为这种写法会将计算使用一条mad指令来完成，否则可能就需要使用add和mul两条指令来完成；


一个简单的例子：

$$
(x-0.3) * 2.5 = x*2.5 +(-0.75)
$$

左右两边在运算结果上并没有区别。但是编译后左边的代码需要用到两个指令，右边的代码只需要用到一个指令。如下图可知，Mad乘加操作是一条指令。


![](/img/post-engine/cg.jpg)


主要要有1.0/b，不要直接写成除法，那么就会生成div指令，而不是mad指令了；rcp，将除法转换为乘以除数的倒数，


产生阴影时可以使用tex2DProj来利用硬件特性加速



## 一些用于优化的属性
HLSL中用于优化的指令，[branch],[flatten],[loop],[unroll]


### if语句
* branch
添加了branch标签的if语句shader会根据判断语句只执行当前情况的代码，这样会产生跳转指令。
* flatten
添加了flatten标签的if语句shader会执行全部情况的分支代码，然后根据判断语句来决定使用哪个结果。
### for语句
* unroll
添加了unroll标签的for循环是可以展开的，直到循环条件终止，代价是产生更多机器码
* loop
添加了loop标签的for循环不能展开，流式控制每次的循环迭代，for默认是loop



### 调试函数

void debug(float4 x) &nbsp;如果在编译时设置了DEBUG，片段着 色程序中调用该函数可以将值x作为COLOR语义的最终输出；否则该函数什么也不做。

<br>

### HLSL函数和glsl映射


<table>
 <tr>
    <th>HLSL</th>
    <th>GLSL</th>
    <th>Desc</th>
</tr>
<tr>
    <td>ddx  </td>
    <td>dFdx</td>
    <td>偏导函数</td>
</tr>            
<tr>
    <td>atan2(y,x)</td>
    <td>atan(x,y)</td>
    <td>反正切函数</td>
</tr>            
<tr>
    <td>ddx_coarse</td>
    <td>dFdxCoarse</td>
    <td>计算与屏幕空间 x 坐标相关的低精度部分</td>
</tr>            
<tr>
    <td>ddx_fine </td>
    <td>dFdxFine</td>
    <td>计算与屏幕空间 x 坐标相关的高精度分部</td>
</tr>            
<tr>
    <td>ddy </td>
    <td>dFdy</td>
    <td>偏导函数</td>
</tr>            
<tr>
    <td>ddy_coarse</td>
    <td>dFdyCoarse</td>
    <td>计算与屏幕空间 y 坐标相关的低精度部分</td>
</tr>            
<tr>
    <td>ddy_fine </td>
    <td>dFdyFine</td>
    <td>计算与屏幕空间 y 坐标相关的高精度分部</td>
</tr>            
<tr>
    <td>EvaluateAttributeAtCentroid </td>
    <td>interpolateAtCentroid</td>
    <td> 评估像素质心</td>
</tr>              
<tr>
    <td>EvaluateAttributeAtSample </td>
    <td>interpolateAtSample</td>
    <td>评估索引的取样位置</td>
</tr>            
 <tr>
    <td>EvaluateAttributeSnapped </td>
    <td>interpolateAtOffset</td>
    <td>评估在像素的质心与一个偏移量</td>
</tr>                
  <tr>
    <td>frac </td>
    <td>fract</td>
    <td>返回标量或每个矢量中各分量的小数部分</td>
</tr>    
  <tr>
    <td>lerp </td>
    <td>mix</td>
    <td>插值</td>
</tr> 
 <tr>
    <td>mad  </td>
    <td>fma</td>
    <td>相乘并求和</td>
</tr>    
 <tr>
    <td>saturate </td>
    <td>clamp(x, 0.0, 1.0)</td>
    <td>限制0-1之间</td>
</tr>     
</table>          



1. [glsl API手册][i1]
2. [nVidia cg API 手册][i2]


[i1]: https://www.khronos.org/registry/OpenGL-Refpages/gl4/
[i2]: https://developer.download.nvidia.cn/cg/index_stdlib.html