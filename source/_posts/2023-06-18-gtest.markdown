---
layout:     post
title:      "测试框架"
date:       2023-06-18 02:00:00
author:     "huailiang"
tags:
    - C/C++
---

\
  showProfit();
}
```

#### 2 编写测试函数

在CommodityTest的头文件中添加如下槽函数

头文件：
```c++
private slots:
  //成本
  void case1_gui_costing();
  //价格
  void case2_gui_price();
  //利润
  void case3_gui_profit();
```

源文件，注意这里添加了ui头文件：
```c++
#include "commoditytest.h"
#include "commodity.h"
#include "commoditywidget.h"
#include "ui_commoditywidget.h"
void CommodityTest::case1_gui_costing()
{
  CommodityWidget w;
  //模拟按键，在键盘上输入成本 5.0
  QTest::keyClicks(w.ui->line_costing, "5.0");
  QCOMPARE(w.costing(), 5.0);
}
void CommodityTest::case2_gui_price()
{
  CommodityWidget w;
  //模拟按键，在键盘上输入价格 7.2
  QTest::keyClicks(w.ui->line_price, "7.2");
  QCOMPARE(w.price(), 7.2);
}
void CommodityTest::case3_gui_profit()
{
  CommodityWidget w;
  //模拟按键，在键盘上输入成本5.0，价格7.2 
  //最后比较利润是否为2.2
  QTest::keyClicks(w.ui->line_costing, "5.0");
  QTest::keyClicks(w.ui->line_price, "7.2");
  QCOMPARE(w.profit(), 2.2);
}
```

获取界面每个控件的入参状态后，通过QTest对控件对象进行操作，完成模拟人工输入

| 键盘相关	| 鼠标相关
| --- | :---
|keyClick(...) 键盘按一个键<br>keyClicks(...) 键盘按多个键<br>keyEvent(...) 键盘事件<br>keyPress(...) 键盘按下<br>keyRelease(...) 键盘释放	|mouseClick(...) 鼠标单击<br>mouseDClick(...) 鼠标双击<br>mouseMove(...) 鼠标移动<br>mousePress(...) 鼠标按下<br>mouseRelease(...) 鼠标释放

### PySide 

Python中PySide.QtTest.QTest.keyClicks方法的典型用法代码示例

```py
# 需要导入模块: from PySide.QtTest import QTest [as 别名]
# 或者: from PySide.QtTest.QTest import keyClicks [as 别名]
def keyClicks(self, widget, sequence, modifier=qt.Qt.NoModifier, delay=-1):
    """Simulate clicking a sequence of keys.

    See QTest.keyClick for details.
    """
    QTest.keyClicks(widget, sequence, modifier, delay)
    self.qWait(20)
```


[i1]: http://code.google.com/p/googlemock/